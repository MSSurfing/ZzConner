(function ($) {
    function _submit(el, params) {

    };
    function _load(el, params) {
        var opts = $.data(el, "form").options;
        if (typeof params == "string") {
            var data1 = {};
            if (opts.onBeforeLoad.call(el, data1) == false) {
                return;
            }
            $.ajax({
                url: params,
                data: data1,
                dataType: "json",
                success: function (data2) {
                    setValue(data2);
                }, error: function () {
                    opts.onLoadError.apply(el, arguments);
                }
            });
        } else {
            setValue(params);
        }

        function setValue(data3) {
            var $el = $(el);
            for (var name3 in data3) {
                var val = data3[name3];
                if (!checked(name3, val)) {
                    $el.find("input[name=\"" + name3 + "\"]").val(val);
                    $el.find("textarea[name=\"" + name3 + "\"]").val(val);
                    $el.find("select[name=\"" + name3 + "\"]").val(val);
                }
            }
            opts.onLoadSuccess.call(el, data3);
            $el.form("validate");
        };

        function checked(name4, val) {
            //find switch button and set value
            //var cc = $(el).find("[switchbuttonName=\"" + name4 + "\"]");
            //if (cc.length) {
            //    cc.switchbutton("uncheck");
            //    cc.each(function () {
            //        if (equalOrInArray($(this).switchbutton("options").value, val)) {
            //            $(this).switchbutton("check");
            //        }
            //    });
            //    return true;
            //}

            //find radio and checkbox and set value
            cc = $(el).find("input[name=\"" + name4 + "\"][type=radio], input[name=\"" + name4 + "\"][type=checkbox]");
            if (cc.length) {
                cc._propAttr("checked", false);
                cc.each(function () {
                    if (equalOrInArray($(this).val(), val)) {
                        $(this)._propAttr("checked", true);
                    }
                });
                return true;
            }
            return false;
        };

        function equalOrInArray(v, val) {
            if (v == String(val) || $.inArray(v, $.isArray(val) ? val : [val]) >= 0) {
                return true;
            } else {
                return false;
            }
        };
    };
    function _clear(el) {

    };
    function _reset(el) {

    };
    function _validate(el) {
        return true;
    };
    function _enableValidation(el, validate) {

    };
    function _setOptions(el, opts) {
        opts = opts || {};
        var data = $.data(el, "form");
        if (data)
            $.extend(data.options, opts);
        else
            $.data(el, "form", { options: $.extend({}, $.fn.form.defaults, opts) })
    };

    $.fn.form = function (method, param) {
        if (typeof method == "string") {
            this.each(function () {
                _setOptions(this);
            })
            return $.fn.form.methods[method](this, param);
        }
    };
    $.fn.form.methods = {
        options: function (jq) {
            return $.data(jq[0], "form").options;
        }, submit: function (jq, _p50) {
            return jq.each(function () {
                _submit(this, _p50);
            });
        }, load: function (jq, _p51) {
            return jq.each(function () {
                _load(this, _p51);
            });
        }, clear: function (jq) {
            return jq.each(function () {
                _clear(this);
            });
        }, reset: function (jq) {
            return jq.each(function () {
                _reset(this);
            });
        }, validate: function (jq) {
            return _validate(jq[0]);
        }, disableValidation: function (jq) {
            return jq.each(function () {
                _enableValidation(this, true);
            });
        }, enableValidation: function (jq) {
            return jq.each(function () {
                _enableValidation(this, false);
            });
        }, resetValidation: function (jq) {
            return jq.each(function () {
                $(this).find(".validatebox-text:not(:disabled)").validatebox("resetValidation");
            });
        }
    };
    $.fn.form.defaults = {
        queryParams: {},
        onSubmit: function (param) {
            return $(this).form("validate");
        },
        success: function (data) { },
        onBeforeLoad: function (param) { },
        onLoadSuccess: function (data) { },
        onLoadError: function () { },
        onChange: function (target) { }
    };
})(jQuery);